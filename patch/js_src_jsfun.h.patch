--- mozilla-esr17-orig/js/src/jsfun.h	2013-02-15 14:59:22.000000000 -0600
+++ mozilla-esr17/js/src/jsfun.h	2014-07-22 19:30:03.870037142 -0500
@@ -110,7 +110,9 @@
     }
 
     JSAtom *atom() const { return hasGuessedAtom() ? NULL : atom_.get(); }
-    void initAtom(JSAtom *atom) { atom_.init(atom); }
+    void initAtom(JSAtom *atom) {
+      atom_.init(atom);
+    }
     JSAtom *displayAtom() const { return atom_; }
 
     void setGuessedAtom(JSAtom *atom) {
@@ -237,6 +239,52 @@
     return static_cast<const JSFunction *>(this);
 }
 
+#ifdef TxJS
+// These must be defined in a header to be used outside the class.
+static const uint32_t JSSLOT_BOUND_FUNCTION_THIS       = 0;
+static const uint32_t JSSLOT_BOUND_FUNCTION_ARGS_COUNT = 1;
+
+static const uint32_t BOUND_FUNCTION_RESERVED_SLOTS = 2;
+
+inline JSObject *
+JSFunction::getBoundFunctionTarget() const
+{
+    JS_ASSERT(isFunction());
+    JS_ASSERT(isBoundFunction());
+
+    /* Bound functions abuse |parent| to store their target function. */
+    return getParent();
+}
+
+inline const js::Value &
+JSFunction::getBoundFunctionThis() const
+{
+    JS_ASSERT(isFunction());
+    JS_ASSERT(isBoundFunction());
+
+    return getSlot(JSSLOT_BOUND_FUNCTION_THIS);
+}
+
+inline const js::Value &
+JSFunction::getBoundFunctionArgument(unsigned which) const
+{
+    JS_ASSERT(isFunction());
+    JS_ASSERT(isBoundFunction());
+    JS_ASSERT(which < getBoundFunctionArgumentCount());
+
+    return getSlot(BOUND_FUNCTION_RESERVED_SLOTS + which);
+}
+
+inline size_t
+JSFunction::getBoundFunctionArgumentCount() const
+{
+    JS_ASSERT(isFunction());
+    JS_ASSERT(isBoundFunction());
+
+    return getSlot(JSSLOT_BOUND_FUNCTION_ARGS_COUNT).toPrivateUint32();
+}
+#endif
+
 extern JSString *
 fun_toStringHelper(JSContext *cx, JSObject *obj, unsigned indent);
 
