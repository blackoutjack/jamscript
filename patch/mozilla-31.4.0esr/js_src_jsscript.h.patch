--- ff-orig/mozilla-31.4.0esr/js/src/jsscript.h	2015-01-05 23:08:03.000000000 -0600
+++ ff-dev/mozilla-31.4.0esr/js/src/jsscript.h	2015-02-16 18:01:11.877775257 -0600
@@ -66,6 +66,9 @@
     JSTRY_CATCH,
     JSTRY_FINALLY,
     JSTRY_ITER,
+#ifdef TxJS
+    JSTRY_TX,
+#endif
     JSTRY_LOOP
 } JSTryNoteKind;
 
@@ -698,6 +701,16 @@
     /* Persistent type information retained across GCs. */
     js::types::TypeScript *types;
 
+#ifdef TxJS
+  private:
+    js::Value introspector_;
+  public:
+    inline const js::Value getIntrospector() { return introspector_; }
+    inline void setIntrospector(const js::Value &ispect) {
+        introspector_ = ispect;
+    }
+#endif
+
   private:
     // This script's ScriptSourceObject, or a CCW thereof.
     //
@@ -969,7 +982,18 @@
     }
 
     size_t nslots() const {
+#ifdef TxJS
+        // Transaction suspension may occur on various operations,
+        // thereby pushing extra 3 values onto the stack to invoke
+        // the introspector.
+        // %%% This could be obviated by adding JOF_TMPSLOT3 for all
+        // %%% applicable ops in Opcodes.h.
+        // %%% We could also make this conditional on whether the script
+        // %%% contains a transaction block.
+        return nslots_ + 3;
+#else
         return nslots_;
+#endif
     }
 
     size_t staticLevel() const {

