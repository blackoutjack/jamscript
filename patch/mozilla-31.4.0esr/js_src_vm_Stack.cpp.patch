--- ff-orig/mozilla-31.4.0esr/js/src/vm/Stack.cpp	2015-01-05 23:08:07.000000000 -0600
+++ ff-dev/mozilla-31.4.0esr/js/src/vm/Stack.cpp	2015-02-02 18:19:55.848459868 -0600
@@ -92,6 +92,9 @@
     Debug_SetValueRangeToCrashOnTouch(&rval_, 1);
     hookData_ = (void *)0xbad;
 #endif
+#ifdef TxJS
+    suspendedTx_ = nullptr;
+#endif
 }
 
 template <InterpreterFrame::TriggerPostBarriers doPostBarrier>
@@ -479,6 +482,18 @@
 
     fp->mark_ = mark;
     fp->initCallFrame(cx, nullptr, nullptr, nullptr, *fun, script, argv, args.length(), flags);
+#ifdef TxJS
+    // Save a transaction that is in the process of suspending, so that
+    // we can automatically resume it when this frame returns.
+    TxContext *tx = cx->getSuspendingTx();
+    if (tx) {
+        JS_ASSERT(!fp->suspendedTx());
+        // Advance the transaction state.
+        JS_ASSERT(tx->inState(TX_SUSPEND0 | TX_END0));
+        tx->advanceState();
+        fp->setSuspendedTx(tx);
+    }
+#endif
     return fp;
 }
 
@@ -499,6 +514,17 @@
     fp->initExecuteFrame(cx, script, evalInFrame, thisv, *scopeChain, type);
     fp->initVarsToUndefined();
 
+#ifdef TxJS
+    // Save a transaction that is in the process of suspending, so that
+    // we can automatically resume it when this frame returns.
+    TxContext *tx = cx->getSuspendingTx();
+    if (tx) {
+        JS_ASSERT(!fp->suspendedTx());
+        JS_ASSERT(tx->inState(TX_SUSPEND0 | TX_END0));
+        tx->advanceState();
+        fp->setSuspendedTx(tx);
+    }
+#endif
     return fp;
 }
 

