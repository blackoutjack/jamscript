--- ff-orig/mozilla-31.4.0esr/js/src/jit/Ion.cpp	2015-01-05 23:08:02.000000000 -0600
+++ ff-dev/mozilla-31.4.0esr/js/src/jit/Ion.cpp	2015-01-25 21:28:30.366432609 -0600
@@ -2132,6 +2132,12 @@
     JS_ASSERT((JSOp)*pc == JSOP_LOOPENTRY);
     JS_ASSERT(LoopEntryCanIonOsr(pc));
 
+#if 0//def TxJS
+    if (cx->getRunningTx()) {
+        ForbidCompilation(cx, script);
+        return Method_CantCompile;
+    }
+#endif
     // Skip if the script has been disabled.
     if (!script->canIonCompile())
         return Method_Skipped;
@@ -2175,6 +2181,12 @@
 {
     JS_ASSERT(jit::IsIonEnabled(cx));
 
+#if 0//def TxJS
+    if (cx->getRunningTx()) {
+        ForbidCompilation(cx, script);
+        return Method_CantCompile;
+    }
+#endif
     JSScript *script = state.script();
 
     // Skip if the script has been disabled.
@@ -2257,6 +2269,12 @@
     JS_ASSERT(!frame->fun()->nonLazyScript()->hasIonScript());
     JS_ASSERT(frame->isFunctionFrame());
 
+#if 0//def TxJS
+    if (cx->getRunningTx()) {
+        ForbidCompilation(cx, script);
+        return Method_CantCompile;
+    }
+#endif
     // Mark as forbidden if frame can't be handled.
     if (!CheckFrame(frame)) {
         ForbidCompilation(cx, script);
@@ -2297,6 +2315,12 @@
 MethodStatus
 jit::CanEnterInParallel(JSContext *cx, HandleScript script)
 {
+#if 0//def TxJS
+    if (cx->getRunningTx()) {
+        ForbidCompilation(cx, script);
+        return Method_CantCompile;
+    }
+#endif
     // Skip if the script has been disabled.
     //
     // Note: We return Method_Skipped in this case because the other
@@ -2342,6 +2366,12 @@
 {
     JS_ASSERT(jit::IsIonEnabled(cx));
 
+#if 0//def TxJS
+    if (cx->getRunningTx()) {
+        ForbidCompilation(cx, script);
+        return Method_CantCompile;
+    }
+#endif
     // Skip if the code is expected to result in a bailout.
     if (!script->hasIonScript() || script->ionScript()->bailoutExpected())
         return Method_Skipped;

