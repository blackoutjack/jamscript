--- ff-orig/mozilla-31.4.0esr/js/src/vm/Interpreter.h	2015-01-05 23:08:07.000000000 -0600
+++ ff-dev/mozilla-31.4.0esr/js/src/vm/Interpreter.h	2015-02-25 13:24:47.940090357 -0600
@@ -178,10 +178,16 @@
     enum Kind { Execute, Invoke, Generator };
     Kind kind_;
 
+#ifdef TxJS
+    RootedValue introspector_;
+#endif
     RootedScript script_;
 
     explicit RunState(JSContext *cx, Kind kind, JSScript *script)
       : kind_(kind),
+#ifdef TxJS
+        introspector_(cx, UndefinedValue()),
+#endif
         script_(cx, script)
     { }
 
@@ -203,6 +209,17 @@
         return (GeneratorState *)this;
     }
 
+#ifdef TxJS
+    bool getIntrospector(MutableHandleValue ispect) const {
+        ispect.set(introspector_);
+        return true;
+    }
+    bool setIntrospector(HandleValue ispect) {
+        introspector_.set(ispect);
+        return true;
+    }
+#endif
+
     JSScript *script() const { return script_; }
 
     virtual InterpreterFrame *pushInterpreterFrame(JSContext *cx) = 0;
@@ -323,6 +340,20 @@
 extern void
 UnwindScope(JSContext *cx, ScopeIter &si, jsbytecode *pc);
 
+#ifdef TxJS
+extern bool 
+BeginTx(JSContext *cx, HandleValue ispect);
+
+extern bool 
+IntrospectTx(JSContext *cx, TxContext *tx, InterpreterActivation *activation, bool isEnd, HandleScript script, int *path, bool *newType);
+
+extern bool
+TxSubsumed(JSContext *cx, HandleValue ispect);
+
+extern bool
+SuspendCall(JSContext *cx, TxContext *tx, InterpreterActivation &activation, CallArgs &args, bool *construct);
+#endif
+
 /*
  * Unwind for an uncatchable exception. This means not running finalizers, etc;
  * just preserving the basic engine stack invariants.

