--- ff-orig/mozilla-22.0/js/src/jsfun.h	2013-06-18 06:01:26.000000000 -0500
+++ ff-dev/mozilla-22.0/js/src/jsfun.h	2015-01-21 09:13:57.178359118 -0600
@@ -45,6 +45,14 @@
         INTERPRETED_LAZY = 0x1000,  /* function is interpreted but doesn't have a script yet */
         ARROW            = 0x2000,  /* ES6 '(args) => body' syntax */
 
+#ifdef TxJS
+        NO_SUSPEND       = 0x4000,  /* indicates that a call to this
+                                       function should not suspend
+                                       an active transaction */
+        NCTOR_NOSUSP     = 0x4002,  /* both a native constructor and
+                                       no suspend; necessary to return
+                                       from JSAPIToJSFunctionFlags */
+#endif
         /* Derived Flags values for convenience: */
         NATIVE_FUN = 0,
         INTERPRETED_LAMBDA = INTERPRETED | LAMBDA,
@@ -100,6 +108,9 @@
     bool isSelfHostedConstructor()  const { return flags & SELF_HOSTED_CTOR; }
     bool hasRest()                  const { return flags & HAS_REST; }
     bool hasDefaults()              const { return flags & HAS_DEFAULTS; }
+#ifdef TxJS
+    bool noSuspend()                const { return flags & NO_SUSPEND; }
+#endif
 
     // Arrow functions are a little weird.
     //
@@ -337,15 +348,63 @@
     return static_cast<const JSFunction *>(this);
 }
 
+#ifdef TxJS
+// These must be defined in a header to be used outside the class.
+static const uint32_t JSSLOT_BOUND_FUNCTION_THIS       = 0;
+static const uint32_t JSSLOT_BOUND_FUNCTION_ARGS_COUNT = 1;
+
+static const uint32_t BOUND_FUNCTION_RESERVED_SLOTS = 2;
+
+inline const js::Value &
+JSFunction::getBoundFunctionThis() const
+{
+    JS_ASSERT(isFunction());
+    JS_ASSERT(isBoundFunction());
+
+    return getSlot(JSSLOT_BOUND_FUNCTION_THIS);
+}
+
+inline const js::Value &
+JSFunction::getBoundFunctionArgument(unsigned which) const
+{
+    JS_ASSERT(isFunction());
+    JS_ASSERT(isBoundFunction());
+    JS_ASSERT(which < getBoundFunctionArgumentCount());
+
+    return getSlot(BOUND_FUNCTION_RESERVED_SLOTS + which);
+}
+
+inline size_t
+JSFunction::getBoundFunctionArgumentCount() const
+{
+    JS_ASSERT(isFunction());
+    JS_ASSERT(isBoundFunction());
+
+    return getSlot(JSSLOT_BOUND_FUNCTION_ARGS_COUNT).toPrivateUint32();
+}
+#endif
+
 extern JSString *
 fun_toStringHelper(JSContext *cx, js::HandleObject obj, unsigned indent);
 
 inline JSFunction::Flags
 JSAPIToJSFunctionFlags(unsigned flags)
 {
+#ifdef TxJS
+    if (flags & JSFUN_TX_NOSUSPEND) {
+      return (flags & JSFUN_CONSTRUCTOR)
+           ? JSFunction::NCTOR_NOSUSP
+           : JSFunction::NO_SUSPEND;
+    } else {
+      return (flags & JSFUN_CONSTRUCTOR)
+           ? JSFunction::NATIVE_CTOR
+           : JSFunction::NATIVE_FUN;
+    }
+#else
     return (flags & JSFUN_CONSTRUCTOR)
            ? JSFunction::NATIVE_CTOR
            : JSFunction::NATIVE_FUN;
+#endif
 }
 
 namespace js {

