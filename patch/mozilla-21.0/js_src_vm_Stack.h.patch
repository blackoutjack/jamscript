--- ff-orig/mozilla-21.0/js/src/vm/Stack.h	2013-05-11 14:19:36.000000000 -0500
+++ ff-dev/mozilla-21.0/js/src/vm/Stack.h	2015-01-19 23:03:29.746572710 -0600
@@ -14,6 +14,11 @@
 #include "ion/IonFrameIterator.h"
 #endif
 #include "jsautooplen.h"
+#include "vm/Stack.h"
+
+#ifdef TxJS
+#include "jstx.h"
+#endif
 
 struct JSContext;
 struct JSCompartment;
@@ -393,6 +398,9 @@
         CALLING_INTO_ION     = 0x400000,  /* frame is calling into Ion */
 
         JIT_REVISED_STACK    = 0x800000   /* sp was revised by JIT for lowered apply */
+#ifdef TxJS
+       ,HAS_SUSPENDED_TX =     0x1000000
+#endif
     };
 
   private:
@@ -416,6 +424,13 @@
     void                *hookData_;     /* if HAS_HOOK_DATA, closure returned by call hook */
     FrameRejoinState    rejoin_;        /* for a jit frame rejoining the interpreter
                                          * from JIT code, state at rejoin. */
+#ifdef TxJS
+    // When the handler is called on suspend or at the end of a
+    // transaction, the transaction object is saved here. When this
+    // frame returns, we know to resume or terminate the transaction
+    // (depending on the transaction state).
+    TxContext *suspendedTx_;
+#endif
 
     static void staticAsserts() {
         JS_STATIC_ASSERT(offsetof(StackFrame, rval_) % sizeof(Value) == 0);
@@ -872,6 +887,16 @@
         rejoin_ = state;
     }
 
+#ifdef TxJS
+    inline TxContext *suspendedTx() const {
+        return (flags_ & HAS_SUSPENDED_TX) ? suspendedTx_ : NULL;
+    }
+    inline void setSuspendedTx(TxContext *tx) {
+        flags_ |= HAS_SUSPENDED_TX;
+        suspendedTx_ = tx;
+    }
+
+#endif
     /* Down frame expansion state */
 
     void setDownFramesExpanded() {

