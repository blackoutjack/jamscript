--- ff-orig/mozilla-20.0.1/js/src/frontend/Parser.cpp	2013-04-09 22:01:49.000000000 -0500
+++ ff-dev/mozilla-20.0.1/js/src/frontend/Parser.cpp	2015-01-19 21:29:36.822737407 -0600
@@ -521,6 +521,11 @@
             return ENDS_IN_OTHER;
         return HasFinalReturn(pn->last());
 
+#ifdef TxJS
+      case PNK_TX:
+        return ENDS_IN_OTHER;
+#endif
+
       case PNK_IF:
         if (!pn->pn_kid3)
             return ENDS_IN_OTHER;
@@ -1360,6 +1365,7 @@
     ParseNode *argsbody = ListNode::create(PNK_ARGSBODY, this);
     if (!argsbody)
         return false;
+
     argsbody->setOp(JSOP_NOP);
     argsbody->makeEmpty();
 
@@ -1516,7 +1522,11 @@
     pn->pn_dflags = 0;
 
     /* Function statements add a binding to the enclosing scope. */
+#ifdef TxJS_HOIST
+    bool bodyLevel = pc->atBodyLevel() || pc->hasTxTop;
+#else
     bool bodyLevel = pc->atBodyLevel();
+#endif
     if (kind == Statement) {
         /*
          * Handle redeclaration and optimize cases where we can statically bind the
@@ -1792,6 +1802,51 @@
     return true;
 }
 
+#ifdef TxJS
+bool
+Parser::txArguments(ParseNode* txpn)
+{
+    if (tokenStream.getToken() != TOK_LP) {
+        reportError(NULL, JSMSG_PAREN_BEFORE_FORMAL);
+        return false;
+    }
+    
+    ParseNode *arg = expr();
+    if (!arg) {
+        // %%% Report error.
+        return false;
+    }
+    txpn->pn_left = arg;
+
+    /*
+    ParseNode *argsbody = ListNode::create(PNK_ARGSBODY, this);
+    if (!argsbody)
+        return false;
+
+    argsbody->setOp(JSOP_NOP);
+    argsbody->makeEmpty();
+
+    txpn->pn_left = argsbody;
+
+    if (!tokenStream.matchToken(TOK_RP)) {
+        do {
+            ParseNode *arg = expr();
+            if (!arg)
+                return false;
+            argsbody->append(arg);
+        } while (tokenStream.matchToken(TOK_COMMA));
+    }
+    */
+
+    if (tokenStream.getToken() != TOK_RP) {
+        reportError(NULL, JSMSG_PAREN_AFTER_FORMAL);
+        return false;
+    }
+
+    return true;
+}
+#endif
+
 ParseNode *
 Parser::functionStmt()
 {
@@ -1939,6 +1994,12 @@
                 return NULL;
         }
 
+#ifdef TxJS_HOIST
+        if (next->isKind(PNK_TX) && next->pn_xflags & PNX_FUNCDEFS) {
+          next->pn_xflags &= ~PNX_FUNCDEFS;
+          pn->pn_xflags |= PNX_FUNCDEFS;
+        }
+#endif
         if (next->isKind(PNK_FUNCTION)) {
             /*
              * PNX_FUNCDEFS notifies the emitter that the block contains body-
@@ -1949,7 +2010,11 @@
              * is relevant only for function definitions not at body-level,
              * which we call function statements.
              */
+#ifdef TxJS_HOIST
+            if (pc->atBodyLevel() || pc->hasTxTop) {
+#else
             if (pc->atBodyLevel()) {
+#endif
                 pn->pn_xflags |= PNX_FUNCDEFS;
             } else {
                 /*
@@ -2790,7 +2855,13 @@
     }
 
     /* Make a new node for this declarator name (or destructuring pattern). */
+#if 0//def TxJS
+    // %%% This was part of an attempt to allow "transaction" to be used
+    // %%% as an identifier name.
+    JS_ASSERT(parser->tokenStream.currentToken().type == TOK_NAME || parser->tokenStream.currentToken().type == TOK_TX);
+#else
     JS_ASSERT(parser->tokenStream.currentToken().type == TOK_NAME);
+#endif
     return NameNode::create(PNK_NAME, atom, parser, parser->pc);
 }
 
@@ -3738,6 +3809,13 @@
         return functionStmt();
       }
 
+#ifdef TxJS
+      case TOK_TX:
+      {
+        return txStmt();
+      }
+#endif
+
       case TOK_IF:
       {
         /* An IF node has three kids: condition, then, and optional else. */
@@ -4128,13 +4206,28 @@
         }
 #endif /* JS_HAS_DESTRUCTURING */
 
+#if 0//def TxJS
+        // %%% This was an attempt to allow "transaction" to be used as
+        // %%% an identifier name.
+        RootedPropertyName name(context);
+        if (tt == TOK_TX) {
+            
+            name = Atomize(context, "transaction", 11)->asPropertyName(); 
+        } else {
+#endif
+
         if (tt != TOK_NAME) {
             if (tt != TOK_ERROR)
                 reportError(NULL, JSMSG_NO_VARIABLE_NAME);
             return NULL;
         }
 
+#if 0//def TxJS
+            name = tokenStream.currentToken().name();
+        }
+#else
         RootedPropertyName name(context, tokenStream.currentToken().name());
+#endif
         pn2 = NewBindingNode(name, this, varContext);
         if (!pn2)
             return NULL;
@@ -4412,6 +4505,112 @@
     return pn;
 }
 
+#ifdef TxJS
+ParseNode *
+Parser::txStmt()
+{
+    JS_ASSERT(tokenStream.currentToken().type == TOK_TX);
+
+    ParseNode *pn, *pn1;
+
+    StmtInfoPC stmtInfo(context);
+#ifdef TxJS_HOIST
+    StmtInfoPC *txTop = pc->topStmt;
+    bool hasTxTop = pc->atBodyLevel();
+#endif
+    PushStatementPC(pc, &stmtInfo, STMT_TX);
+
+    // Transaction statements may optionally be named.
+    // %%% The name doesn't currently serve any purpose.
+    RootedPropertyName name(context);
+    if (tokenStream.getToken(TSF_KEYWORD_IS_NAME) == TOK_NAME)
+        name = tokenStream.currentToken().name();
+    else
+        tokenStream.ungetToken();
+
+    /*
+     * This code models transactions as inline blocks.
+     */
+
+    pn = BinaryNode::create(PNK_TX, this);
+    if (!pn)
+      return NULL;
+    pn->setOp(JSOP_BEGIN_TX);
+
+    /* Parse the "argument list" to get the policy function. */
+    if (!txArguments(pn))
+        return NULL;
+
+#ifdef TxJS_HOIST
+    if (tokenStream.peekToken(TSF_OPERAND) == TOK_LC) {
+        tokenStream.getToken(TSF_OPERAND);
+        JS_CHECK_RECURSION(context, return NULL);
+
+        StmtInfoPC stmtInfo1(context);
+        if (!PushBlocklikeStatement(&stmtInfo1, STMT_BLOCK, pc))
+            return NULL;
+        if (hasTxTop) {
+            pc->txTop = txTop;
+            pc->hasTxTop = true;
+        }
+        bool hasFunctionStmt;
+        pn1 = statements(&hasFunctionStmt);
+        if (hasFunctionStmt) {
+          pn1->pn_xflags &= ~PNX_FUNCDEFS;
+          pn->pn_xflags |= PNX_FUNCDEFS;
+        }
+        if (pn1) {
+            MUST_MATCH_TOKEN(TOK_RC, JSMSG_CURLY_IN_COMPOUND);
+            PopStatementPC(context, pc);
+        }
+    } else
+#endif
+        pn1 = statement();
+
+    if (!pn1)
+        return NULL;
+    pn->pn_right = pn1;
+
+    // Pop the value if the transaction is not an expression.
+    pn->pn_xflags |= PNX_POPVAR;
+
+    PopStatementPC(context, pc);
+
+    return pn;
+}
+
+ParseNode *
+Parser::txExpr()
+{
+    if (!tokenStream.matchToken(TOK_TX))
+        return NULL;
+
+    // This code models transactions as inline blocks.
+    ParseNode *pn, *pn1;
+
+    pn = BinaryNode::create(PNK_TX, this);
+    if (!pn)
+      return NULL;
+    pn->setOp(JSOP_BEGIN_TX);
+
+    /* Parse the "argument list" to get the policy function. */
+    if (!txArguments(pn))
+        return NULL;
+
+    pn1 = statement();
+    if (!pn1)
+        return NULL;
+    pn->pn_right = pn1;
+
+    //PopStatementPC(context, pc);
+
+    // This code models transactions as function invocations.
+    //ParseNode *pn = txDef();
+
+    return pn;
+}
+#endif
+
 JS_ALWAYS_INLINE ParseNode *
 Parser::condExpr1()
 {
@@ -4495,6 +4694,14 @@
         return returnOrYield(true);
 #endif
 
+#ifdef TxJS
+    // If the right-hand side of the assignment is a transaction,
+    // parse it as such.
+    ParseNode *pn = txExpr();
+    if (pn)
+        return pn;
+#endif
+
     ParseNode *lhs = condExpr1();
     if (!lhs)
         return NULL;

