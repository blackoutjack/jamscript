--- ff-orig/mozilla-27.0.1/js/src/jsfun.cpp	2014-02-12 15:29:04.000000000 -0600
+++ ff-dev/mozilla-27.0.1/js/src/jsfun.cpp	2015-01-24 17:44:40.873351454 -0600
@@ -679,7 +679,9 @@
         // expression closures.
         JS_ASSERT_IF(funCon, !fun->isArrow());
         JS_ASSERT_IF(funCon, !exprBody);
+#ifndef TxJS
         JS_ASSERT_IF(!funCon && !fun->isArrow(), src->length() > 0 && chars[0] == '(');
+#endif
 
         // If a function inherits strict mode by having scopes above it that
         // have "use strict", we insert "use strict" into the body of the
@@ -1034,10 +1036,12 @@
     return true;
 }
 
+#ifndef TxJS
 static const uint32_t JSSLOT_BOUND_FUNCTION_THIS       = 0;
 static const uint32_t JSSLOT_BOUND_FUNCTION_ARGS_COUNT = 1;
 
 static const uint32_t BOUND_FUNCTION_RESERVED_SLOTS = 2;
+#endif
 
 inline bool
 JSFunction::initBoundFunction(JSContext *cx, HandleValue thisArg,
@@ -1067,6 +1071,8 @@
     return true;
 }
 
+#ifndef TxJS
+// These must be in the header to use them outside this file.
 inline const js::Value &
 JSFunction::getBoundFunctionThis() const
 {
@@ -1091,6 +1097,7 @@
 
     return getSlot(JSSLOT_BOUND_FUNCTION_ARGS_COUNT).toPrivateUint32();
 }
+#endif
 
 /* static */ bool
 JSFunction::createScriptForLazilyInterpretedFunction(JSContext *cx, HandleFunction fun)
@@ -1360,8 +1367,13 @@
     JS_FN(js_toSource_str,   fun_toSource,   0,0),
 #endif
     JS_FN(js_toString_str,   fun_toString,   0,0),
+#ifdef TxJS
+    JS_FN(js_apply_str,      js_fun_apply,   2,JSFUN_TX_NOSUSPEND),
+    JS_FN(js_call_str,       js_fun_call,    1,JSFUN_TX_NOSUSPEND),
+#else
     JS_FN(js_apply_str,      js_fun_apply,   2,0),
     JS_FN(js_call_str,       js_fun_call,    1,0),
+#endif
     JS_FN("bind",            fun_bind,       1,0),
     JS_FN("isGenerator",     fun_isGenerator,0,0),
     JS_FS_END

