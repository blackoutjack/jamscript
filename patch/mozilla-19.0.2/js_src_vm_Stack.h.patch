--- ff-orig/mozilla-19.0.2/js/src/vm/Stack.h	2013-03-07 04:48:51.000000000 -0600
+++ ff-dev/mozilla-19.0.2/js/src/vm/Stack.h	2015-01-19 17:33:10.067152203 -0600
@@ -13,6 +13,11 @@
 #include "ion/IonFrameIterator.h"
 #endif
 #include "jsautooplen.h"
+#include "vm/Stack.h"
+
+#ifdef TxJS
+#include "jstx.h"
+#endif
 
 struct JSContext;
 struct JSCompartment;
@@ -275,6 +280,9 @@
         /* Ion frame state */
         RUNNING_IN_ION       = 0x400000,  /* frame is running in Ion */
         CALLING_INTO_ION     = 0x800000   /* frame is calling into Ion */
+#ifdef TxJS
+       ,HAS_SUSPENDED_TX =     0x1000000
+#endif
     };
 
   private:
@@ -299,6 +307,13 @@
     void                *annotation_;   /* if HAS_ANNOTATION, perhaps remove with bug 546848 */
     FrameRejoinState    rejoin_;        /* for a jit frame rejoining the interpreter
                                          * from JIT code, state at rejoin. */
+#ifdef TxJS
+    // When the handler is called on suspend or at the end of a
+    // transaction, the transaction object is saved here. When this
+    // frame returns, we know to resume or terminate the transaction
+    // (depending on the transaction state).
+    TxContext *suspendedTx_;
+#endif
 
     static void staticAsserts() {
         JS_STATIC_ASSERT(offsetof(StackFrame, rval_) % sizeof(Value) == 0);
@@ -774,6 +789,16 @@
         rejoin_ = state;
     }
 
+#ifdef TxJS
+    inline TxContext *suspendedTx() const {
+        return (flags_ & HAS_SUSPENDED_TX) ? suspendedTx_ : NULL;
+    }
+    inline void setSuspendedTx(TxContext *tx) {
+        flags_ |= HAS_SUSPENDED_TX;
+        suspendedTx_ = tx;
+    }
+
+#endif
     /* Down frame expansion state */
 
     void setDownFramesExpanded() {

