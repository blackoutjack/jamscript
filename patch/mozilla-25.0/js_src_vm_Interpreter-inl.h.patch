--- ff-orig/mozilla-25.0/js/src/vm/Interpreter-inl.h	2013-10-25 17:27:26.000000000 -0500
+++ ff-dev/mozilla-25.0/js/src/vm/Interpreter-inl.h	2015-01-24 13:12:59.453828080 -0600
@@ -16,6 +16,10 @@
 #include "jslibmath.h"
 #include "jsnum.h"
 #include "jsstr.h"
+#ifdef TxJS
+#include "jsmath.h"
+#include "jstransaction.h"
+#endif
 
 #include "jit/Ion.h"
 #include "jit/IonCompartment.h"
@@ -78,6 +82,29 @@
     return vp->isMagic(JS_OPTIMIZED_ARGUMENTS);
 }
 
+#ifdef TxJS
+static inline bool
+IsSuspendingFunction(JSContext *cx, Value &calleev, JSFunction **fun) {
+    if (!IsFunctionObject(calleev, fun))
+        return false;
+
+    // We want to suspend on the unbound version.
+    if ((*fun)->isBoundFunction())
+        return false;
+
+    if ((*fun)->isNative()) {
+        // Implement whitelisting.
+        if ((*fun)->noSuspend())
+            return false;
+        if ((*fun)->native() == js_Array)
+            return false;
+        // Suspend on all (unwhitelisted) native calls.
+        return true;
+    }
+    return false;
+}
+#endif
+
 /*
  * One optimized consumer of MagicValue(JS_OPTIMIZED_ARGUMENTS) is f.apply.
  * However, this speculation must be guarded before calling 'apply' in case it
@@ -209,6 +236,20 @@
         if (!NativeGet(cx, normalized, obj2, shape, 0, vp))
             return false;
     }
+
+#ifdef TxJS
+    TxContext *tx = cx->getRunningTx();
+    if (tx) {
+        // Update the already-created read set node to reflect the value
+        // and the scope in which it was found.
+        //node->obj = pobj.get();
+        // Add the property to the read set, with the head of the scope
+        // chain as the object, and an undefined value.
+        // %%% Need to root?
+        tx->recordAction(cx, obj.get(), NameToId(name), vp, AX_READ);
+    }
+#endif
+
     return true;
 }
 
@@ -356,6 +397,10 @@
 GetObjectElementOperation(JSContext *cx, JSOp op, JSObject *objArg, bool wasObject,
                           HandleValue rref, MutableHandleValue res)
 {
+#ifdef TxJS
+    TxContext *tx = cx->getRunningTx();
+    RootedId id(cx);
+#endif
     do {
         // Don't call GetPcScript (needed for analysis) from inside Ion since it's expensive.
         bool analyze = cx->currentlyRunningInInterpreter();
@@ -371,6 +416,14 @@
                     script->analysis()->getCode(pc).nonNativeGetElement = true;
             }
 
+#ifdef TxJS
+            IndexToId(cx, index, &id);
+            if (tx) {
+                RootedObject robj(cx, objArg);
+                if (tx->getProperty(cx, robj, id.get(), res))
+                    break;
+            }
+#endif
             if (JSObject::getElementNoGC(cx, objArg, objArg, index, res.address()))
                 break;
 
@@ -412,6 +465,14 @@
 
         JSAtom *name = ToAtom<NoGC>(cx, rref);
         if (name) {
+#ifdef TxJS
+            id = AtomToId(name);
+            if (tx) {
+                RootedObject robj(cx, objArg);
+                if (tx->getProperty(cx, robj, id.get(), res))
+                    break;
+            }
+#endif
             if (name->isIndex(&index)) {
                 if (JSObject::getElementNoGC(cx, objArg, objArg, index, res.address()))
                     break;
@@ -427,6 +488,13 @@
         if (!name)
             return false;
 
+#ifdef TxJS
+        id = AtomToId(name);
+        if (tx) {
+            if (tx->getProperty(cx, obj, id, res))
+                break;
+        }
+#endif
         if (name->isIndex(&index)) {
             if (!JSObject::getElement(cx, obj, obj, index, res))
                 return false;
@@ -438,6 +506,12 @@
         objArg = obj;
     } while (0);
 
+#ifdef TxJS
+    if (tx) {
+        RootedObject robj(cx, objArg);
+        tx->recordAction(cx, robj, id.get(), res.get(), AX_READ);
+    }
+#endif
 #if JS_HAS_NO_SUCH_METHOD
     if (op == JSOP_CALLELEM && JS_UNLIKELY(res.isPrimitive()) && wasObject) {
         RootedObject obj(cx, objArg);
@@ -471,6 +545,9 @@
             return false;
 
         lref.set(ObjectValue(frame.argsObj()));
+#ifdef TxJS
+        // %%% Record
+#endif
     }
 
     return true;
@@ -490,6 +567,10 @@
             if (!str)
                 return false;
             res.setString(str);
+            // %%% Record this
+            //jsid id;
+            //IndexToId(cx, i, &id);
+            //tx->recordAction(cx, StringObject(fullstr), id, res.get(), AX_READ);
             return true;
         }
     }

