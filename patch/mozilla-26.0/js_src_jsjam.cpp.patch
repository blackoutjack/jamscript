--- ff-orig/mozilla-26.0/js/src/jsjam.cpp	1969-12-31 18:00:00.000000000 -0600
+++ ff-dev/mozilla-26.0/js/src/jsjam.cpp	2015-01-24 15:40:21.701569547 -0600
@@ -0,0 +1,1134 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "jsversion.h"
+#ifdef TxJS
+
+/*
+ * JAM native object package.
+ */
+
+#include <sys/time.h>
+#include <sys/resource.h>
+
+#include "jstypes.h"
+#include "jsapi.h"
+#include "jsatom.h"
+#include "jscntxt.h"
+#include "jsversion.h"
+#include "jsjam.h"
+
+#include "jsobjinlines.h"
+
+#include "prmjtime.h"
+
+using namespace js;
+
+#ifdef TxJS_PROFILE_ACTIONS
+const char *actionTypeNames[] = {
+  "AX_NULL (lookup miss)",
+  "AX_READ",
+  "AX_WRITE",
+  "AX_CALL",
+  "AX_DELETE",
+  "AX_FORIN",
+  "AX_NEW",
+};
+#endif
+
+class JAMProfiler
+{
+  private:
+    typedef HashMap<unsigned,unsigned> TxCounts;
+    
+  public:
+
+    class JAMProfileEntry {
+      private:
+#ifdef TxJS_PROFILE_TX
+        TxCounts *entryCounts;
+        TxCounts *endingCounts;
+        TxCounts *suspensionCounts;
+#endif
+#ifdef TxJS_PROFILE_ACTIONS
+        TxCounts *actionRecordCounts;
+        TxCounts *actionRetrievalCounts;
+        TxCounts *actionCommitCounts;
+        TxCounts *actionLookupCounts;
+#endif
+        bool running;
+        JSString *id;
+        int64_t startTime;
+        int64_t endTime;
+#ifdef TxJS_PROFILE_MEM
+        int64_t startMemory;
+#endif
+        JSContext *cx;
+
+      public:
+
+        ~JAMProfileEntry() {
+#ifdef TxJS_PROFILE_TX
+            deleteCounts(&entryCounts);
+            deleteCounts(&endingCounts);
+            deleteCounts(&suspensionCounts);
+#endif
+#ifdef TxJS_PROFILE_ACTIONS
+            deleteCounts(&actionRecordCounts);
+            deleteCounts(&actionRetrievalCounts);
+            deleteCounts(&actionCommitCounts);
+            deleteCounts(&actionLookupCounts);
+#endif
+        }
+
+        bool
+        deleteCounts(TxCounts **counts) {
+            if (*counts) {
+                (*counts)->finish();
+                delete *counts;
+            }
+            return true;
+        }
+        
+        bool
+        initCounts(TxCounts **counts) {
+            deleteCounts(counts);
+            *counts = new TxCounts(TempAllocPolicy(cx));
+            (*counts)->init();
+            if (!(*counts)->initialized()) {
+                fprintf(stderr, "ERROR: could not initialize hash map");
+                return false;
+            }
+            return true;
+        }
+
+        bool
+        start(JSContext *cx, JSString *id) {
+
+            this->cx = cx;
+            this->id = id;
+            this->running = true;
+            this->startTime = PRMJ_Now();
+
+#ifdef TxJS_PROFILE_MEM
+            struct rusage u;
+            getrusage(RUSAGE_SELF, &u);
+            this->startMemory = u.ru_maxrss;
+#endif
+
+#ifdef TxJS_PROFILE_TX
+            initCounts(&entryCounts);
+            initCounts(&endingCounts);
+            initCounts(&suspensionCounts);
+#endif
+#ifdef TxJS_PROFILE_ACTIONS
+            initCounts(&actionRecordCounts);
+            initCounts(&actionRetrievalCounts);
+            initCounts(&actionCommitCounts);
+            initCounts(&actionLookupCounts);
+#endif
+
+            return true;
+        }
+
+        bool
+        stop() {
+            endTime = PRMJ_Now();    
+            running = false;
+            return true;
+        }
+
+#ifdef TxJS_PROFILE_TX
+        bool
+        addEntry(const char *script, unsigned line) {
+            // %%% Use script as key also
+            unsigned cnt = 0;
+            if (TxCounts::Ptr p = entryCounts->lookup(line)) {
+                JS_ASSERT(p->key == line);     // Entry contains the key
+                cnt = p->value;     // and value
+                entryCounts->remove(line);
+            }
+            ++cnt;
+            entryCounts->put(line, cnt);
+
+            return true;
+        }
+
+        bool
+        addEnding(const char *script, unsigned line) {
+            // %%% Use script as key also
+            unsigned cnt = 0;
+            if (TxCounts::Ptr p = endingCounts->lookup(line)) {
+                JS_ASSERT(p->key == line);     // Entry contains the key
+                cnt = p->value;     // and value
+                endingCounts->remove(line);
+            }
+            ++cnt;
+            endingCounts->put(line, cnt);
+
+            return true;
+        }
+
+        bool
+        addSuspension(const char *script, unsigned line) {
+            // %%% Use script as key also
+            unsigned cnt = 0;
+            if (TxCounts::Ptr p = suspensionCounts->lookup(line)) {
+                JS_ASSERT(p->key == line);     // Entry contains the key
+                cnt = p->value;     // and value
+                suspensionCounts->remove(line);
+            }
+            ++cnt;
+            suspensionCounts->put(line, cnt);
+
+            return true;
+        }
+#endif
+
+#ifdef TxJS_PROFILE_ACTIONS
+        bool
+        addActions(uint32_t n, TxActionType type) {
+            unsigned cnt = 0;
+            if (TxCounts::Ptr p = actionRecordCounts->lookup(type)) {
+                JS_ASSERT(p->key == type);
+                cnt = p->value;
+                actionRecordCounts->remove(type);
+            }
+            cnt += n;
+            actionRecordCounts->put(type, cnt);
+
+            return true;
+        }
+
+        bool
+        addActionRetrieval(uint32_t n, TxActionType type) {
+            unsigned cnt = 0;
+            if (TxCounts::Ptr p = actionRetrievalCounts->lookup(type)) {
+                JS_ASSERT(p->key == type);
+                cnt = p->value;
+                actionRetrievalCounts->remove(type);
+            }
+            cnt += n;
+            actionRetrievalCounts->put(type, cnt);
+
+            return true;
+        }
+
+        bool
+        addActionCommit(uint32_t n, TxActionType type) {
+            unsigned cnt = 0;
+
+            if (TxCounts::Ptr p = actionCommitCounts->lookup(type)) {
+                JS_ASSERT(p->key == type);
+                cnt = p->value;
+                actionCommitCounts->remove(type);
+            }
+            cnt += n;
+            actionCommitCounts->put(type, cnt);
+
+            return true;
+        }
+
+        bool
+        addActionLookup(uint32_t n, TxActionType type) {
+            unsigned cnt = 0;
+
+            if (TxCounts::Ptr p = actionLookupCounts->lookup(type)) {
+                JS_ASSERT(p->key == type);
+                cnt = p->value;
+                actionLookupCounts->remove(type);
+            }
+            cnt += n;
+            actionLookupCounts->put(type, cnt);
+
+            return true;
+        }
+#endif
+
+        bool
+        printName() {
+            // |id->getChars()| just returns the first character.
+            uint32_t bufsize = id->length() + 1;
+            char *buf = (char*)malloc(bufsize * sizeof(char));
+            JS_PutEscapedString(cx, buf, bufsize, id, '\0');
+            fprintf(stderr, "<<<<< Profile: %s >>>>>\n", buf);
+            free(buf);
+
+            // Output the JavaScript stack.
+            js_DumpBacktrace(cx);
+
+            return true;
+        }
+
+        bool
+        printCounts(TxCounts *cnts, const char *header, bool isActions=false) {
+            unsigned tot = 0;
+            fprintf(stderr, "%s\n", header);
+            // %%% Iterate in some sensible order.
+            for (TxCounts::Range r = cnts->all(); !r.empty(); r.popFront()) {
+                unsigned line = r.front().key;
+                unsigned cnt = r.front().value;
+                tot += cnt;
+#ifdef TxJS_PROFILE_ACTIONS
+                if (isActions) {
+                    // Don't print actions without any occurrences.
+                    if (cnt == 0) continue;
+
+                    // Retrieve the action type name when appropriate.
+                    unsigned idx = 0;
+                    if (line > 0) {
+                        idx++;
+                        while (line != 1) {
+                          JS_ASSERT(idx < 32);
+                          line >>= 1;
+                          idx++;
+                        }
+                    }
+                    const char *atype = actionTypeNames[idx];  
+                    fprintf(stderr, "%s/%d\n", atype, cnt);
+                } else
+#endif
+                    fprintf(stderr, "%d/%d\n", line, cnt);
+            }
+            fprintf(stderr, "total/%d\n", tot);
+
+            return true;
+        }
+
+#ifdef TxJS_PROFILE_TX
+        bool
+        printEntryCounts() {
+            return printCounts(entryCounts, "===== Transaction blocks entered =====\nline/count");
+        }
+
+        bool
+        printEndingCounts() {
+            return printCounts(endingCounts, "===== Transaction blocks ended =====\nline/count");
+        }
+
+        bool
+        printSuspensionCounts() {
+            return printCounts(suspensionCounts, "===== Transaction suspensions =====\nline/count");
+        }
+#endif
+
+#ifdef TxJS_PROFILE_ACTIONS
+        bool
+        printActionCounts() {
+            return printCounts(actionRecordCounts, "===== Actions recorded =====\ntype/count", true);
+        }
+
+        bool
+        printActionRetrievalCounts() {
+            return printCounts(actionRetrievalCounts, "===== Actions retrieved =====\ntype/count", true);
+        }
+
+        bool
+        printActionCommitCounts() {
+            return printCounts(actionCommitCounts, "===== Actions committed =====\ntype/count", true);
+        }
+
+        bool
+        printActionLookupCounts() {
+            return printCounts(actionLookupCounts, "===== Actions values looked up =====\ntype/count", true);
+        }
+#endif
+
+        bool
+        printTimeElapsed() {
+            int64_t start = getStartTime();
+            int64_t end = getEndTime();
+            //int64_t tot = (end - start) / PRMJ_USEC_PER_MSEC;
+            int64_t tot = (end - start);
+            fprintf(stderr, "===== Time elapsed: %ldus =====\n", tot);
+            return true;
+        }
+
+#ifdef TxJS_PROFILE_MEM
+        bool
+        printMemoryStats() {
+            int64_t start = getStartMemory();
+            int64_t max = getMaxMemory();
+            int64_t used = (max - start);
+            fprintf(stderr, "===== Memory max: %ldKB =====\n", max);
+            fprintf(stderr, "===== Memory gain: %ldKB =====\n", used);
+            return true;
+        }
+
+        int64_t getStartMemory() {
+            return startMemory;
+        }
+
+        int64_t getMaxMemory() {
+            struct rusage u;
+            getrusage(RUSAGE_SELF, &u);
+            return u.ru_maxrss;
+        }
+#endif
+
+        int64_t getStartTime() {
+            return startTime;
+        }
+
+        int64_t getEndTime() {
+            // Return the current time if the profile has not ended.
+            if (running) {
+              endTime = PRMJ_Now();    
+            }
+            return endTime;
+        }
+
+        bool isRunning() {
+            return running;
+        }
+    };
+
+  private:
+    typedef HashMap<JSString*,JAMProfileEntry*> ProfileMap;
+    ProfileMap *profileMap;
+
+  public:
+    bool
+    printProfile(JAMProfileEntry *pe)
+    {
+        pe->printName();
+        pe->printTimeElapsed();
+#ifdef TxJS_PROFILE_MEM
+        pe->printMemoryStats();
+#endif
+#ifdef TxJS_PROFILE_TX
+        pe->printEntryCounts();
+        pe->printEndingCounts();
+        pe->printSuspensionCounts();
+#endif
+#ifdef TxJS_PROFILE_ACTIONS
+        pe->printActionCounts();
+        pe->printActionRetrievalCounts();
+        pe->printActionCommitCounts();
+        pe->printActionLookupCounts();
+#endif
+
+        return true;
+    }
+    
+    bool
+    printProfile(JSContext *cx, JSString *id)
+    {
+        if (!profileMap)
+            return false;
+
+        ProfileMap::Ptr p = profileMap->lookup(id);
+        if (p) {
+            JS_ASSERT(p->key == id);
+            JAMProfileEntry *pe = p->value;
+            printProfile(pe);
+            return true;
+        }
+        return false;
+    }
+
+    bool
+    startProfile(JSContext *cx, JSString *id)
+    {
+        if (!profileMap) {
+            profileMap = new ProfileMap(TempAllocPolicy(cx));
+            profileMap->init();
+        }
+        
+        ProfileMap::Ptr p = profileMap->lookup(id);
+        JAMProfileEntry *entry;
+        if (p) {
+            entry = p->value;
+        } else {
+            entry = new JAMProfileEntry();
+            profileMap->put(id, entry);
+        }
+        return entry->start(cx, id);
+    }
+
+    bool
+    stopProfile(JSContext *cx, JSString *id)
+    {
+        if (!profileMap)
+            return false;
+
+        ProfileMap::Ptr p = profileMap->lookup(id);
+        if (p) {
+            JS_ASSERT(p->key == id);
+            JAMProfileEntry *pe = p->value;
+            pe->stop();
+            return true;
+        }
+        
+        return false;
+    }
+
+    bool
+    removeProfile(JSContext *cx, JSString *id)
+    {
+        if (!profileMap)
+            return false;
+
+        ProfileMap::Ptr p = profileMap->lookup(id);
+        if (p) {
+            JS_ASSERT(p->key == id);
+            JAMProfileEntry *pe = p->value;
+            delete pe;
+            profileMap->remove(p);
+            if (profileMap->count() == 0) {
+              profileMap->finish();
+              delete profileMap;
+              profileMap = NULL;
+            }
+            return true;
+        }
+
+        return false;
+    }
+
+#ifdef TxJS_PROFILE_TX
+    bool
+    addEntry(const char *filename, unsigned line)
+    {
+        if (!profileMap)
+            return true;
+
+        for (ProfileMap::Range r = profileMap->all(); !r.empty(); r.popFront()) {
+            JAMProfileEntry *pe = r.front().value;
+            if (pe->isRunning()) {
+                if (!pe->addEntry(filename, line))
+                    return false;
+            }
+        }
+        return true;
+    }
+
+    bool
+    addEnding(const char *filename, unsigned line)
+    {
+        if (!profileMap)
+            return true;
+
+        for (ProfileMap::Range r = profileMap->all(); !r.empty(); r.popFront()) {
+            JAMProfileEntry *pe = r.front().value;
+            if (pe->isRunning()) {
+                if (!pe->addEnding(filename, line))
+                    return false;
+            }
+        }
+        return true;
+    }
+
+    bool
+    addSuspension(const char *filename, unsigned line)
+    {
+        if (!profileMap)
+            return true;
+
+        for (ProfileMap::Range r = profileMap->all(); !r.empty(); r.popFront()) {
+            JAMProfileEntry *pe = r.front().value;
+            if (pe->isRunning()) {
+                if (!pe->addSuspension(filename, line))
+                    return false;
+            }
+        }
+        return true;
+    }
+#endif
+
+#ifdef TxJS_PROFILE_ACTIONS
+    bool
+    addActions(TxContext *tx)
+    {
+        if (!profileMap)
+            return true;
+
+        TxActionType type;
+        for (ProfileMap::Range r = profileMap->all(); !r.empty(); r.popFront()) {
+            JAMProfileEntry *pe = r.front().value;
+            if (pe->isRunning()) {
+                type = AX_WRITE;
+                if (!pe->addActions(tx->getWriteCount(), type))
+                    return false;
+                type = AX_READ;
+                if (!pe->addActions(tx->getReadCount(), type))
+                    return false;
+                type = AX_CALL;
+                if (!pe->addActions(tx->getCallCount(), type))
+                    return false;
+                type = AX_DELETE;
+                if (!pe->addActions(tx->getDeleteCount(), type))
+                    return false;
+                type = AX_FORIN;
+                if (!pe->addActions(tx->getForinCount(), type))
+                    return false;
+            }
+        }
+        return true;
+    }
+
+    bool
+    addActionRetrieval(uint32_t cnt, TxActionType type)
+    {
+        if (!profileMap)
+            return true;
+
+        for (ProfileMap::Range r = profileMap->all(); !r.empty(); r.popFront()) {
+            JAMProfileEntry *pe = r.front().value;
+            if (pe->isRunning()) {
+                if (!pe->addActionRetrieval(cnt, type))
+                    return false;
+            }
+        }
+        return true;
+    }
+
+    bool
+    addActionCommit(uint32_t cnt, TxActionType type)
+    {
+        if (!profileMap)
+            return true;
+
+        for (ProfileMap::Range r = profileMap->all(); !r.empty(); r.popFront()) {
+            JAMProfileEntry *pe = r.front().value;
+            if (pe->isRunning()) {
+                if (!pe->addActionCommit(cnt, type))
+                    return false;
+            }
+        }
+        return true;
+    }
+
+    bool
+    addActionLookup(uint32_t cnt, TxActionType type)
+    {
+        if (!profileMap)
+            return true;
+
+        for (ProfileMap::Range r = profileMap->all(); !r.empty(); r.popFront()) {
+            JAMProfileEntry *pe = r.front().value;
+            if (pe->isRunning()) {
+                if (!pe->addActionLookup(cnt, type))
+                    return false;
+            }
+        }
+        return true;
+    }
+#endif
+
+    bool
+    isActive()
+    {
+      return !!profileMap;
+    }
+};
+
+JAMProfiler profiler;
+
+Class JAMClass = {
+    js_JAM_str,
+    JSCLASS_HAS_CACHED_PROTO(JSProto_JAM),
+    JS_PropertyStub,         // addProperty
+    JS_DeletePropertyStub,   // delProperty
+    JS_PropertyStub,         // getProperty
+    JS_StrictPropertyStub,   // setProperty
+    JS_EnumerateStub,
+    JS_ResolveStub,
+    JS_ConvertStub
+};
+
+#ifdef TxJS_PROFILE_TX
+bool
+js_jam_profileTxEntry(JSContext *cx, TxContext *tx)
+{
+    if (!profiler.isActive())
+      return true;
+
+#ifdef TxJS_TRANSPARENT
+    if (tx->inState(TX_DUMMY))
+      return true;
+#endif
+
+#ifdef DEBUG
+    uint32_t nestDepth = 0;
+    TxContext *curtx = tx->getNext();
+    while (curtx != NULL) {
+      if (curtx->inState(TX_RUNNING)) {
+        nestDepth++;
+      }
+      curtx = curtx->getNext();
+    }
+    if (nestDepth > 0) {
+      ScriptFrameIter i(cx);
+      RootedScript script(cx, i.script());
+      const char *filename = JS_GetScriptFilename(cx, script);
+      unsigned line = JS_PCToLineNumber(cx, script, i.pc());
+      fprintf(stderr, "WARNING: nested %d %s:%d\n", nestDepth, filename, line);
+      // Output the JavaScript stack.
+      js_DumpBacktrace(cx);
+    }
+#endif
+
+    ScriptFrameIter i(cx);
+    RootedScript script(cx, i.script());
+    const char *filename = JS_GetScriptFilename(cx, script);
+    unsigned line = JS_PCToLineNumber(cx, script, i.pc());
+    profiler.addEntry(filename, line);
+    return true;
+}
+
+bool
+js_jam_profileTxSuspension(JSContext *cx, TxContext *tx)
+{
+    if (!profiler.isActive())
+      return true;
+
+    ScriptFrameIter i(cx);
+    RootedScript script(cx, i.script());
+    const char *filename = JS_GetScriptFilename(cx, script);
+    unsigned line = JS_PCToLineNumber(cx, script, i.pc());
+    profiler.addSuspension(filename, line);
+    return true;
+}
+
+bool
+js_jam_profileTxEnding(JSContext *cx, TxContext *tx)
+{
+    if (!profiler.isActive())
+      return true;
+    
+    ScriptFrameIter i(cx);
+    RootedScript script(cx, i.script());
+    const char *filename = JS_GetScriptFilename(cx, script);
+    unsigned line = JS_PCToLineNumber(cx, script, i.pc());
+    profiler.addEnding(filename, line);
+    return true;
+}
+#endif
+
+#ifdef TxJS_PROFILE_ACTIONS
+bool
+js_jam_profileActions(JSContext *cx, TxContext *tx)
+{
+    if (!profiler.isActive())
+      return true;
+
+    profiler.addActions(tx);
+    return true;
+}
+
+bool
+js_jam_profileActionRetrieval(JSContext *cx, uint32_t cnt, TxActionType type)
+{
+    if (!profiler.isActive())
+      return true;
+
+    profiler.addActionRetrieval(cnt, type);
+    return true;
+}
+
+bool
+js_jam_profileActionCommit(JSContext *cx, uint32_t cnt, TxActionType type)
+{
+    if (!profiler.isActive())
+      return true;
+
+    profiler.addActionCommit(cnt, type);
+    return true;
+}
+
+bool
+js_jam_profileActionLookup(JSContext *cx, uint32_t cnt, TxActionType type)
+{
+    if (!profiler.isActive())
+      return true;
+
+    profiler.addActionLookup(cnt, type);
+    return true;
+}
+#endif
+
+bool
+js_jam_startProfile(JSContext *cx, unsigned argc, Value *vp)
+{
+    CallArgs args = CallArgsFromVp(argc, vp);
+
+    if (args.length() == 0) {
+        args.rval().setBoolean(false);
+        return true;
+    }
+
+    RootedValue arg(cx, args[0]);
+    JSString *profid = ToString<CanGC>(cx, arg);
+    bool ok = profiler.startProfile(cx, profid);
+
+    vp->setBoolean(ok);
+    return true;
+}
+
+bool
+js_jam_stopProfile(JSContext *cx, unsigned argc, Value *vp)
+{
+    CallArgs args = CallArgsFromVp(argc, vp);
+
+    if (args.length() == 0) {
+        args.rval().setBoolean(false);
+        return true;
+    }
+
+    RootedValue arg(cx, args[0]);
+    JSString *profid = ToString<CanGC>(cx, arg);
+    bool ok = profiler.stopProfile(cx, profid);
+    if (ok) ok = profiler.printProfile(cx, profid);
+    if (ok) ok = profiler.removeProfile(cx, profid);
+
+    vp->setBoolean(ok);
+    return true;
+}
+
+bool
+js_jam_setDynamicIntrospector(JSContext *cx, unsigned argc, Value *vp)
+{
+    CallArgs args = CallArgsFromVp(argc, vp);
+
+    if (argc == 0) {
+        cx->interpreterFrame()->script()->setIntrospector(JSVAL_VOID);
+        args.rval().setBoolean(true);
+        return true;
+    }
+
+    cx->interpreterFrame()->script()->setIntrospector(args[0]);
+    vp->setBoolean(true);
+    return true;
+}
+
+bool
+js_jam_isNativeFunction(JSContext *cx, unsigned argc, Value *vp)
+{
+    CallArgs args = CallArgsFromVp(argc, vp);
+
+    if (argc == 0) {
+        args.rval().setBoolean(false);
+        return true;
+    }
+
+    MutableHandleValue v = args[0];
+    if (!v.isObject()) {
+        args.rval().setBoolean(false);
+        return true;
+    }
+
+    // Strip any proxies.
+    JSObject *obj = &v.toObject();
+    while (IsProxy(obj)) {
+        v.set(GetProxyPrivate(obj));
+        if (v.isObject()) {
+            obj = &v.toObject();
+        } else {
+            args.rval().setBoolean(false);
+            return true;
+        }
+    }
+
+    while (IsFunctionObject(v)) {
+        if (!obj->isBoundFunction())
+            break;
+        // For some reason, using |getBoundFunctionTarget|
+        // produces linking errors. It's simple enough to
+        // replicate: the target is stored in parent.
+        obj = obj->getParent();
+        v.set(ObjectValue(*obj));
+    }
+
+    if (IsNativeFunction(v)) {
+        args.rval().setBoolean(true);
+        return true;
+    }
+
+    args.rval().setBoolean(false);
+    return true;
+}
+
+bool
+js_jam_newApply(JSContext *cx, unsigned argc, Value *vp)
+{
+    CallArgs args = CallArgsFromVp(argc, vp);
+
+    if (argc < 1)
+        return false;
+
+    // Suspend on application of native function.
+    TxContext *tx = cx->getRunningTx();
+    if (tx) {
+        bool construct = true;
+        if (SuspendCall(cx, tx, args, &construct)) {
+            // Force non-inline execution.
+            int path = 1;
+            // Not used.
+            bool newType;
+            RootedScript s(cx, cx->interpreterFrame()->script());
+            InterpreterActivation *act = cx->mainThread().activation()->asInterpreter();
+            bool ok = IntrospectTx(cx, tx, act, true, s, &path, &newType);
+            args.rval().set(tx->getReturnValue());
+            return ok;
+        }
+    }
+
+    // Let InvokeConstructor check for function values, etc.
+    HandleValue constructor = args[0];
+
+    uint32_t newargc = 0;
+    Value *newargs = NULL;
+    if (argc > 1) {
+        HandleValue argArray = args[1];
+        if (!argArray.isObject()) {
+            JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_BAD_APPLY_ARGS, js_apply_str);
+            return false;
+        }
+        JSObject *argsobj = &argArray.toObject();
+        if (!GetLengthProperty(cx, HandleObject::fromMarkedLocation(&argsobj), &newargc))
+            return false; 
+        if (newargc > 0) {
+            newargs = (Value*)malloc(sizeof(Value)*(newargc));
+            if (!GetElements(cx, HandleObject::fromMarkedLocation(&argsobj), newargc, newargs))
+                return false;
+        }
+    }
+
+    bool ok = InvokeConstructor(cx, constructor, newargc, newargs, args.rval().address());
+    if (newargs) free(newargs);
+
+    return ok;
+}
+
+bool
+js_jam_identical(JSContext *cx, unsigned argc, Value *vp)
+{
+    CallArgs args = CallArgsFromVp(argc, vp);
+
+    if (argc < 2) {
+        args.rval().setBoolean(false);
+        return true;
+    }
+
+    MutableHandleValue lval = args[0];
+    MutableHandleValue rval = args[1];
+    bool stricteq;
+    if (!StrictlyEqual(cx, lval, rval, &stricteq))
+        return false;
+
+    if (stricteq) {
+        args.rval().setBoolean(true);
+        return true;
+    }
+
+    if (lval.isObject() && rval.isObject()) {
+
+        JSObject *lobj = &lval.toObject();
+        JSObject *robj = &rval.toObject();
+
+        // Strip any proxies.
+        while (IsProxy(lobj)) {
+            lval.set(GetProxyPrivate(lobj));
+            if (lval.isObject()) {
+                lobj = &lval.toObject();
+            } else {
+                args.rval().setBoolean(false);
+                return true;
+            }
+        }
+        while (IsProxy(robj)) {
+            rval.set(GetProxyPrivate(robj));
+            if (rval.isObject()) {
+                robj = &rval.toObject();
+            } else {
+                args.rval().setBoolean(false);
+                return true;
+            }
+        }
+
+        bool checkStrict = false;
+        while (IsFunctionObject(lval)) {
+            if (!lobj->isBoundFunction())
+                break;
+            // For some reason, using |getBoundFunctionTarget|
+            // produces linking errors. It's simple enough to
+            // replicate: the target is stored in parent.
+            lobj = lobj->getParent();
+            lval.set(ObjectValue(*lobj));
+            checkStrict = true;
+        }
+        while (IsFunctionObject(rval)) {
+            if (!robj->isBoundFunction())
+                break;
+            // See comment for |lobj| above.
+            robj = robj->getParent();
+            rval.set(ObjectValue(*robj));
+            checkStrict = true;
+        }
+
+        if (checkStrict) {
+            // Recheck strict identify after the root bound
+            // functions are located.
+            if (!StrictlyEqual(cx, lval, rval, &stricteq))
+                return false;
+
+            if (stricteq) {
+                args.rval().setBoolean(true);
+                return true;
+            }
+        }
+
+        if (checkStrict || lobj->global() != robj->global()) {
+
+            // %%% What about prototypes and other native objects?
+            JSFunction *lfun, *rfun;
+            if (IsFunctionObject(lval, &lfun) && IsFunctionObject(rval, &rfun)) {
+                if (lfun->isNative() && rfun->isNative()) {
+                    bool eq;
+                    if (!EqualStrings(cx, JS_GetFunctionId(lfun), JS_GetFunctionId(rfun), &eq))
+                        return false;
+                    if (eq) {
+                        args.rval().setBoolean(true);
+                        return true;
+                    }
+                }
+            }
+        }
+    } 
+    args.rval().setBoolean(false);
+    return true;
+}
+
+bool
+js_jam_instanceof(JSContext *cx, unsigned argc, Value *vp)
+{
+    CallArgs args = CallArgsFromVp(argc, vp);
+
+    if (argc < 2) {
+        args.rval().setBoolean(false);
+        return true;
+    }
+
+    MutableHandleValue lval = args[0];
+    MutableHandleValue rval = args[1];
+    if (rval.isPrimitive()) {
+        args.rval().setBoolean(false);
+        return true;
+    }
+
+    // Strip any proxies.
+    JSObject *lobj = NULL;
+    if (lval.isObject()) {
+        lobj = &lval.toObject();
+        while (IsProxy(lobj)) {
+            lval.set(GetProxyPrivate(lobj));
+            if (lval.isObject()) {
+                lobj = &lval.toObject();
+            } else {
+                args.rval().setBoolean(false);
+                return true;
+            }
+        }
+    }
+    JSObject *robj = &rval.toObject();
+    while (IsProxy(robj)) {
+        rval.set(GetProxyPrivate(robj));
+        if (rval.isObject()) {
+            robj = &rval.toObject();
+        } else {
+            args.rval().setBoolean(false);
+            return true;
+        }
+    }
+
+    // Check the normal case.
+    RootedObject obj(cx, robj);
+    bool result;
+    RootedValue v(cx, lval);
+    if (!HasInstance(cx, obj, v, &result))
+        return false;
+    if (result) {
+        args.rval().setBoolean(true);
+        return true;
+    }
+
+    // Check for cross-compartment prototype relations.
+    // %%% Since each object class can have it's own |hasInstance|
+    // %%% handler, we focus for now on |Function| objects. This means
+    // %%% that only functions should be used as the rhs of |instanceof|
+    // %%% in a JAM policy.
+    if (lobj && IsFunctionObject(rval)) {
+
+        while (IsFunctionObject(rval)) {
+            // See comment in |js_jam_identical| above.
+            if (!robj->isBoundFunction())
+                break;
+            robj = robj->getParent();
+            rval.set(ObjectValue(*robj));
+        }
+
+        RootedObject obj(cx, robj);
+        RootedValue pval(cx);
+        if (!JSObject::getProperty(cx, obj, obj, cx->names().classPrototype, &pval)) {
+            // %%% Should this be an exception?
+            args.rval().setBoolean(false);
+            return true;
+        }
+
+        if (pval.isPrimitive()) {
+            args.rval().setBoolean(false);
+            return true;
+        }
+
+        JSObject *pobj = &pval.toObject();
+        while ((lobj = lobj->getProto()) != NULL) {
+            // This is the altered check. Under normal circumstances,
+            // the objects themselves are compared.
+            // %%% Is this sound?
+            if (lobj->getClass() == pobj->getClass()) {
+                args.rval().setBoolean(true);
+                return true;
+            }
+        }
+    }
+
+    args.rval().setBoolean(false);
+    return true;
+}
+
+static JSFunctionSpec jam_static_methods[] = {
+    JS_FN("startProfile",   js_jam_startProfile,  1, JSFUN_TX_NOSUSPEND),
+    JS_FN("stopProfile",    js_jam_stopProfile,   1, JSFUN_TX_NOSUSPEND),
+    JS_FN("setDynamicIntrospector", js_jam_setDynamicIntrospector, 1, JSFUN_TX_NOSUSPEND),
+    JS_FN("instanceof", js_jam_instanceof, 2, JSFUN_TX_NOSUSPEND),
+    JS_FN("identical", js_jam_identical, 2, JSFUN_TX_NOSUSPEND),
+    JS_FN("isNativeFunction", js_jam_isNativeFunction, 1, JSFUN_TX_NOSUSPEND),
+    JS_FN("newApply", js_jam_newApply, 2, JSFUN_TX_NOSUSPEND),
+    JS_FS_END
+};
+
+JSObject *
+js_InitJAMClass(JSContext *cx, HandleObject obj)
+{
+    RootedObject JAM(cx, NewObjectWithClassProto(cx, &JAMClass, NULL, obj));
+    if (!JAM || !JSObject::setSingletonType(cx, JAM))
+        return NULL;
+
+    if (!JS_DefineProperty(cx, obj, js_JAM_str, OBJECT_TO_JSVAL(JAM),
+                           JS_PropertyStub, JS_StrictPropertyStub, 0)) {
+        return NULL;
+    }
+
+    if (!JS_DefineFunctions(cx, JAM, jam_static_methods))
+        return NULL;
+
+    MarkStandardClassInitializedNoProto(obj, &JAMClass);
+
+    return JAM;
+}
+
+#endif

