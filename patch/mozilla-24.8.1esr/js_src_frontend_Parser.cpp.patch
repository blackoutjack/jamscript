--- ff-orig/mozilla-24.8.1esr/js/src/frontend/Parser.cpp	2014-09-23 21:53:35.000000000 -0500
+++ ff-dev/mozilla-24.8.1esr/js/src/frontend/Parser.cpp	2015-01-23 17:27:18.382951619 -0600
@@ -641,6 +641,11 @@
             return ENDS_IN_OTHER;
         return HasFinalReturn(pn->last());
 
+#ifdef TxJS
+      case PNK_TX:
+        return ENDS_IN_OTHER;
+#endif
+
       case PNK_IF:
         if (!pn->pn_kid3)
             return ENDS_IN_OTHER;
@@ -1666,7 +1671,11 @@
     *pbodyProcessed = false;
 
     /* Function statements add a binding to the enclosing scope. */
+#ifdef TxJS_HOIST
+    bool bodyLevel = pc->atBodyLevel() || pc->hasTxTop;
+#else
     bool bodyLevel = pc->atBodyLevel();
+#endif
 
     if (kind == Statement) {
         /*
@@ -2323,6 +2332,60 @@
     return SyntaxParseHandler::NodeFailure;
 }
 
+#ifdef TxJS
+template <>
+bool
+Parser<FullParseHandler>::txArguments(Node txpn)
+{
+    if (tokenStream.getToken() != TOK_LP) {
+        report(ParseError, false, null(), JSMSG_PAREN_BEFORE_FORMAL);
+        return false;
+    }
+    
+    ParseNode *arg = expr();
+    if (!arg) {
+        // %%% Report error.
+        return false;
+    }
+    txpn->pn_left = arg;
+
+    /*
+    ParseNode *argsbody = ListNode::create(PNK_ARGSBODY, this);
+    if (!argsbody)
+        return false;
+
+    argsbody->setOp(JSOP_NOP);
+    argsbody->makeEmpty();
+
+    txpn->pn_left = argsbody;
+
+    if (!tokenStream.matchToken(TOK_RP)) {
+        do {
+            ParseNode *arg = expr();
+            if (!arg)
+                return false;
+            argsbody->append(arg);
+        } while (tokenStream.matchToken(TOK_COMMA));
+    }
+    */
+
+    if (tokenStream.getToken() != TOK_RP) {
+        report(ParseError, false, null(), JSMSG_PAREN_AFTER_FORMAL);
+        return false;
+    }
+
+    return true;
+}
+
+template <>
+bool
+Parser<SyntaxParseHandler>::txArguments(Node txpn)
+{
+    JS_ALWAYS_FALSE(abortIfSyntaxParser());
+    return SyntaxParseHandler::NodeFailure;
+}
+#endif
+
 template <typename ParseHandler>
 typename ParseHandler::Node
 Parser<ParseHandler>::functionStmt()
@@ -4838,6 +4901,11 @@
         return tryStatement();
       case TOK_FUNCTION:
         return functionStmt();
+#ifdef TxJS
+      case TOK_TX:
+        return txStmt();
+#endif
+
       case TOK_DEBUGGER:
         return debuggerStatement();
 
@@ -5077,6 +5145,130 @@
     return pn;
 }
 
+#ifdef TxJS
+template <>
+ParseNode *
+Parser<FullParseHandler>::txStmt()
+{
+    JS_ASSERT(tokenStream.currentToken().type == TOK_TX);
+
+    ParseNode *pn, *pn1;
+
+    StmtInfoPC stmtInfo(context);
+#ifdef TxJS_HOIST
+    StmtInfoPC *txTop = pc->topStmt;
+    bool hasTxTop = pc->atBodyLevel();
+#endif
+    PushStatementPC(pc, &stmtInfo, STMT_TX);
+
+    // Transaction statements may optionally be named.
+    // %%% The name doesn't currently serve any purpose.
+    RootedPropertyName name(context);
+    if (tokenStream.getToken(TSF_KEYWORD_IS_NAME) == TOK_NAME)
+        name = tokenStream.currentToken().name();
+    else
+        tokenStream.ungetToken();
+
+    /*
+     * This code models transactions as inline blocks.
+     */
+
+    pn = BinaryNode::create(PNK_TX, &handler);
+    if (!pn)
+      return NULL;
+    pn->setOp(JSOP_BEGIN_TX);
+
+    /* Parse the "argument list" to get the policy function. */
+    if (!txArguments(pn))
+        return NULL;
+
+#ifdef TxJS_HOIST
+    if (tokenStream.peekToken(TSF_OPERAND) == TOK_LC) {
+        tokenStream.getToken(TSF_OPERAND);
+        JS_CHECK_RECURSION(context, return NULL);
+
+        StmtInfoPC stmtInfo1(context);
+        if (!PushBlocklikeStatement(&stmtInfo1, STMT_BLOCK, pc))
+            return NULL;
+        if (hasTxTop) {
+            pc->txTop = txTop;
+            pc->hasTxTop = true;
+        }
+        bool hasFunctionStmt;
+        pn1 = statements();
+        if (pc->hasFunctionStmt) {
+          pn1->pn_xflags &= ~PNX_FUNCDEFS;
+          pn->pn_xflags |= PNX_FUNCDEFS;
+        }
+        if (pn1) {
+            MUST_MATCH_TOKEN(TOK_RC, JSMSG_CURLY_IN_COMPOUND);
+            PopStatementPC(context, pc);
+        }
+    } else
+#endif
+        pn1 = statement();
+
+    if (!pn1)
+        return NULL;
+    pn->pn_right = pn1;
+
+    // Pop the value if the transaction is not an expression.
+    pn->pn_xflags |= PNX_POPVAR;
+
+    PopStatementPC(context, pc);
+
+    return pn;
+}
+
+template <>
+SyntaxParseHandler::Node
+Parser<SyntaxParseHandler>::txStmt()
+{
+    JS_ALWAYS_FALSE(abortIfSyntaxParser());
+    return SyntaxParseHandler::NodeFailure;
+}
+
+template <>
+ParseNode *
+Parser<FullParseHandler>::txExpr()
+{
+    if (!tokenStream.matchToken(TOK_TX))
+        return NULL;
+
+    // This code models transactions as inline blocks.
+    ParseNode *pn, *pn1;
+
+    pn = BinaryNode::create(PNK_TX, &handler);
+    if (!pn)
+      return NULL;
+    pn->setOp(JSOP_BEGIN_TX);
+
+    /* Parse the "argument list" to get the policy function. */
+    if (!txArguments(pn))
+        return NULL;
+
+    pn1 = statement();
+    if (!pn1)
+        return NULL;
+    pn->pn_right = pn1;
+
+    //PopStatementPC(context, pc);
+
+    // This code models transactions as function invocations.
+    //ParseNode *pn = txDef();
+
+    return pn;
+}
+
+template <>
+SyntaxParseHandler::Node
+Parser<SyntaxParseHandler>::txExpr()
+{
+    JS_ALWAYS_FALSE(abortIfSyntaxParser());
+    return SyntaxParseHandler::NodeFailure;
+}
+#endif
+
 template <typename ParseHandler>
 JS_ALWAYS_INLINE typename ParseHandler::Node
 Parser<ParseHandler>::condExpr1()
@@ -5178,6 +5370,14 @@
     TokenStream::Position start(keepAtoms);
     tokenStream.tell(&start);
 
+#ifdef TxJS
+    // If the right-hand side of the assignment is a transaction,
+    // parse it as such.
+    Node pn = txExpr();
+    if (pn)
+        return pn;
+#endif
+
     Node lhs = condExpr1();
     if (!lhs)
         return null();

