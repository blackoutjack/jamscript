--- ff-orig/mozilla-24.8.1esr/dom/src/jsurl/nsJSProtocolHandler.cpp	2014-09-23 21:53:30.000000000 -0500
+++ ff-dev/mozilla-24.8.1esr/dom/src/jsurl/nsJSProtocolHandler.cpp	2015-01-23 17:27:18.186951625 -0600
@@ -64,6 +64,9 @@
                             PopupControlState aPopupState,
                             uint32_t aExecutionPolicy,
                             nsPIDOMWindow *aOriginalInnerWindow);
+#ifdef TxJS
+    JS::Value mIntrospector;
+#endif
 
 protected:
     virtual ~nsJSThunk();
@@ -99,6 +102,10 @@
     rv = uri->GetSpec(mURL);
     if (NS_FAILED(rv)) return rv;
 
+#ifdef TxJS
+    mIntrospector = JS::UndefinedValue();
+#endif
+
     return NS_OK;
 }
 
@@ -314,10 +321,17 @@
         JS::CompileOptions options(cx);
         options.setFileAndLine(mURL.get(), 1)
                .setVersion(JSVERSION_DEFAULT);
+#ifdef TxJS
+        rv = scriptContext->EvaluateString(NS_ConvertUTF8toUTF16(script),
+                                           globalJSObject, options,
+                                           /* aCoerceToString = */ true,
+                                           v.address(), mIntrospector);
+#else
         rv = scriptContext->EvaluateString(NS_ConvertUTF8toUTF16(script),
                                            globalJSObject, options,
                                            /* aCoerceToString = */ true,
                                            v.address());
+#endif
 
         // If there's an error on cx as a result of that call, report
         // it now -- either we're just running under the event loop,
@@ -429,6 +443,9 @@
     bool                    mIsAsync;
     bool                    mIsActive;
     bool                    mOpenedStreamChannel;
+#ifdef TxJS
+    JS::Value mIntrospector;
+#endif
 };
 
 nsJSChannel::nsJSChannel() :
@@ -439,6 +456,9 @@
     mExecutionPolicy(EXECUTE_IN_SANDBOX),
     mIsAsync(true),
     mIsActive(false),
+#ifdef TxJS
+    mIntrospector(JS::UndefinedValue()),
+#endif
     mOpenedStreamChannel(false)
 {
 }
@@ -507,6 +527,22 @@
                    nsIStreamListener, nsIScriptChannel, nsIPropertyBag,
                    nsIPropertyBag2)
 
+#ifdef TxJS
+NS_IMETHODIMP
+nsJSChannel::GetIntrospector(JS::Value *aIntrospector)
+{
+    *aIntrospector = mIntrospector;
+    return NS_OK;
+}
+
+NS_IMETHODIMP
+nsJSChannel::SetIntrospector(const JS::Value &aIntrospector)
+{
+    mIntrospector = aIntrospector;
+    return NS_OK;
+}
+#endif
+
 //
 // nsIRequest implementation...
 //
@@ -620,6 +656,17 @@
 
     mIsActive = true;
 
+#ifdef TxJS
+    nsCOMPtr<nsIScriptContext> scriptContext = global->GetContext();
+    if (scriptContext) {
+        JSContext* cx = scriptContext->GetNativeContext();
+        JS::Value ispect = JS_GetIntrospector(cx);
+        if (!ispect.isUndefined()) {
+            SetIntrospector(ispect);
+        }
+    }
+#endif
+
     // Temporarily set the LOAD_BACKGROUND flag to suppress load group observer
     // notifications (and hence nsIWebProgressListener notifications) from
     // being dispatched.  This is required since we suppress LOAD_DOCUMENT_URI,
@@ -718,6 +765,9 @@
     // script returns it).
     
     if (NS_SUCCEEDED(mStatus)) {
+#ifdef TxJS
+        GetIntrospector(&mIOThunk->mIntrospector);
+#endif
         nsresult rv = mIOThunk->EvaluateScript(mStreamChannel, mPopupState,
                                                mExecutionPolicy,
                                                mOriginalInnerWindow);

