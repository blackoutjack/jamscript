--- ff-orig/mozilla-31.0/js/src/vm/Stack.h	2014-07-16 20:45:22.000000000 -0500
+++ ff-dev/mozilla-31.0/js/src/vm/Stack.h	2015-01-25 19:38:33.278625497 -0600
@@ -11,6 +11,9 @@
 
 #include "jsfun.h"
 #include "jsscript.h"
+#ifdef TxJS
+#include "jstx.h"
+#endif
 
 #include "jit/AsmJSLink.h"
 #include "jit/JitFrameIterator.h"
@@ -336,6 +339,9 @@
 
         /* Miscellaneous state. */
         USE_NEW_TYPE       =    0x20000   /* Use new type for constructed |this| object. */
+#ifdef TxJS
+       ,HAS_SUSPENDED_TX   =    0x40000
+#endif
     };
 
   private:
@@ -362,6 +368,13 @@
     Value               *prevsp_;
 
     void                *hookData_;     /* if HAS_HOOK_DATA, closure returned by call hook */
+#ifdef TxJS
+    // When the handler is called on suspend or at the end of a
+    // transaction, the transaction object is saved here. When this
+    // frame returns, we know to resume or terminate the transaction
+    // (depending on the transaction state).
+    TxContext           *suspendedTx_;
+#endif
 
     /*
      * For an eval-in-frame DEBUGGER frame, the frame in whose scope we're
@@ -742,6 +755,16 @@
 
     inline JSCompartment *compartment() const;
 
+#ifdef TxJS
+    inline TxContext *suspendedTx() const {
+        return (flags_ & HAS_SUSPENDED_TX) ? suspendedTx_ : NULL;
+    }
+    inline void setSuspendedTx(TxContext *tx) {
+        flags_ |= HAS_SUSPENDED_TX;
+        suspendedTx_ = tx;
+    }
+#endif
+
     /* Debugger hook data */
 
     bool hasHookData() const {

